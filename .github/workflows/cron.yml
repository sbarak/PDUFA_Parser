name: pdufa-daily-ics

on:
  schedule:
    # Runs daily at 03:20 UTC (~06:20 Asia/Jerusalem)
    - cron: "20 3 * * *"
  workflow_dispatch: {}

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "Calendar Agent/requirements.txt"

      - name: Preflight check
        run: |
          pwd
          ls -la
          echo "---- recursive ----"
          ls -R
          echo "---- verify requirements.txt ----"
          test -f "Calendar Agent/requirements.txt" && echo "Found: Calendar Agent/requirements.txt" || (echo "NOT FOUND" && exit 1)

      - name: Install dependencies
        run: pip install -r "Calendar Agent/requirements.txt"

      - name: Build CSVs
        env:
          ALPHAVANTAGE_API_KEY: ${{ secrets.ALPHAVANTAGE_API_KEY }}
        run: python "Calendar Agent/src/main.py"

      - name: Configure Git author
        run: |
          git config user.name "pdufa-bot"
          git config user.email "pdufa-bot@users.noreply.github.com"

      - name: Commit CSV updates
        id: commit
        run: |
          set -e
          git add "Calendar Agent/data/pdufa_master.csv" "Calendar Agent/data/blank.csv" "Calendar Agent/data/state.json" || true
          if git diff --cached --quiet; then
            echo "committed=false" >> "$GITHUB_OUTPUT"
            echo "No changes to commit"
          else
            git commit -m "chore: daily PDUFA update $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            echo "committed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Rebase onto remote main
        run: |
          git fetch origin main
          git pull --rebase origin main || true

      - name: Push changes (detect if remote advanced)
        id: push
        run: |
          set -e
          REMOTE_BEFORE=$(git ls-remote origin -h refs/heads/main | cut -f1)
          echo "remote_before=$REMOTE_BEFORE" >> "$GITHUB_OUTPUT"
          git push origin HEAD:main
          REMOTE_AFTER=$(git ls-remote origin -h refs/heads/main | cut -f1)
          echo "remote_after=$REMOTE_AFTER" >> "$GITHUB_OUTPUT"
          if [ "$REMOTE_AFTER" != "$REMOTE_BEFORE" ]; then
            echo "pushed=true" >> "$GITHUB_OUTPUT"
            echo "Actually pushed new commit(s)."
          else
            echo "pushed=false" >> "$GITHUB_OUTPUT"
            echo "Nothing to push."
          fi

      - name: Notify on successful push (Telegram)
        if: ${{ success() && steps.push.outputs.pushed == 'true' }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          COMMIT=$(git rev-parse --short HEAD)
          MSG=$(printf "âœ… CSV push to main succeeded.\nRepo: %s\nRun: #%s\nCommit: %s" "${GITHUB_REPOSITORY}" "${GITHUB_RUN_NUMBER}" "${COMMIT}")
          curl -sS -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            --data-urlencode "chat_id=${TG_CHAT_ID}" \
            --data-urlencode "text=${MSG}"
