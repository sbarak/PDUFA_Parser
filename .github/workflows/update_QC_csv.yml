name: Upload CSV to QuantConnect Object Store

on:
  push:
    branches: [ main ]
    paths:
      - "Calendar Agent/data/pdufa_master.csv"  # trigger on this file
  workflow_dispatch:

jobs:
  upload-to-qc-objectstore:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Upload to QuantConnect + Telegram notify
        env:
          QC_USER_ID: ${{ secrets.QC_USER_ID }}
          QC_API_TOKEN: ${{ secrets.QC_API_TOKEN }}
          QC_ORGANIZATION_ID: ${{ secrets.QC_ORGANIZATION_ID }}
          QC_KEY: "PDUFA_Updated_Daily.csv"
          FILE_PATH: "Calendar Agent/data/pdufa_master.csv"
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          GITHUB_REPO: ${{ github.repository }}
          GITHUB_RUN: ${{ github.run_number }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          python - << 'PY'
          import base64, hashlib, time, requests, os, datetime, pathlib, textwrap

          BASE_URL = "https://www.quantconnect.com/api/v2"
          user_id = os.environ["QC_USER_ID"]
          api_token = os.environ["QC_API_TOKEN"]
          org_id = os.environ["QC_ORGANIZATION_ID"]
          key = os.environ["QC_KEY"]
          file_path = os.environ["FILE_PATH"]
          tg_token = os.environ.get("TG_TOKEN")
          tg_chat  = os.environ.get("TG_CHAT_ID")

          repo = os.environ.get("GITHUB_REPO", "")
          runn = os.environ.get("GITHUB_RUN", "")
          sha  = os.environ.get("GITHUB_SHA", "")
          short_sha = sha[:7] if sha else ""

          def send_tg(msg: str):
              if not tg_token or not tg_chat:
                  print("ℹ️ Telegram not configured; skipping notify.")
                  return
              try:
                  requests.post(
                      f"https://api.telegram.org/bot{tg_token}/sendMessage",
                      data={
                          "chat_id": tg_chat,
                          "text": msg,
                          "disable_web_page_preview": True
                      },
                      timeout=10
                  )
              except Exception as e:
                  print(f"⚠️ Telegram failed: {e}")

          try:
              # Ensure file exists
              if not pathlib.Path(file_path).is_file():
                  raise FileNotFoundError(f"File not found: {file_path}")

              # === Auth header per QC spec ===
              ts = str(int(time.time()))
              hashed = hashlib.sha256(f"{api_token}:{ts}".encode()).hexdigest()
              auth = base64.b64encode(f"{user_id}:{hashed}".encode()).decode()
              headers = {"Authorization": f"Basic {auth}", "Timestamp": ts}

              # === Upload ===
              with open(file_path, "rb") as f:
                  files = {"objectData": f.read()}
              data = {"organizationId": org_id, "key": key}

              r = requests.post(f"{BASE_URL}/object/set", headers=headers, data=data, files=files, timeout=60)
              r.raise_for_status()
              ok = r.json().get("success", False)

              now_utc = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
              if ok:
                  msg = textwrap.dedent(f"""\
                      ✅ QC ObjectStore updated
                      Key: {key}
                      File: {file_path}
                      Repo: {repo} (run #{runn}, {short_sha})
                      Time: {now_utc}
                  """).strip()
              else:
                  msg = textwrap.dedent(f"""\
                      ❌ QC upload failed
                      Key: {key}
                      File: {file_path}
                      Repo: {repo} (run #{runn}, {short_sha})
                      Time: {now_utc}
                      Response: {r.text[:500]}
                  """).strip()

              print(msg)
              send_tg(msg)

          except Exception as e:
              now_utc = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
              msg = textwrap.dedent(f"""\
                  ❌ Exception during upload
                  Key: {key}
                  File: {file_path}
                  Repo: {repo} (run #{runn}, {short_sha})
                  Time: {now_utc}
                  Error: {e}
              """).strip()
              print(msg)
              send_tg(msg)
          PY
