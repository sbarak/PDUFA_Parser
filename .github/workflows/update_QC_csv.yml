name: Upload CSV to QuantConnect Object Store

on:
  push:
    branches: [ main ]
    paths:
      - "data/PDUFA_Future.csv"   # run only when this file changes
  workflow_dispatch:               # allow manual runs from the Actions tab

jobs:
  upload-to-qc-objectstore:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Upload to QuantConnect Object Store
        id: upload
        env:
          QC_USER_ID: ${{ secrets.QC_USER_ID }}
          QC_API_TOKEN: ${{ secrets.QC_API_TOKEN }}
          QC_ORGANIZATION_ID: ${{ secrets.QC_ORGANIZATION_ID }}
          QC_KEY: "PDUFA_Updated_Daily.csv"
          FILE_PATH: "Calendar Agent/data/pdufa_master.csv"
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python - << 'PY'
          import base64, hashlib, time, requests, os, datetime

          BASE_URL = "https://www.quantconnect.com/api/v2"
          user_id = os.environ["QC_USER_ID"]
          api_token = os.environ["QC_API_TOKEN"]
          org_id = os.environ["QC_ORGANIZATION_ID"]
          key = os.environ["QC_KEY"]
          file_path = os.environ["FILE_PATH"]

          try:
              # === Auth header ===
              timestamp = str(int(time.time()))
              hashed = hashlib.sha256(f"{api_token}:{timestamp}".encode()).hexdigest()
              auth = base64.b64encode(f"{user_id}:{hashed}".encode()).decode()
              headers = {"Authorization": f"Basic {auth}", "Timestamp": timestamp}

              # === Upload file ===
              with open(file_path, "rb") as f:
                  files = {"objectData": f.read()}
              data = {"organizationId": org_id, "key": key}
              resp = requests.post(f"{BASE_URL}/object/set", headers=headers, data=data, files=files)
              resp.raise_for_status()
              result = resp.json()

      - name: Notify on successful push (Telegram)
        if: ${{steps.upload.result.get == 'success'}}
        run: |
          COMMIT=$(git rev-parse --short HEAD)
          MSG=$(printf "âœ… QC ObjectStore updated: *{key}*\nTime: {datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}" "${GITHUB_REPOSITORY}" "${GITHUB_RUN_NUMBER}" "${COMMIT}")
          curl -sS -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            --data-urlencode "chat_id=${TG_CHAT_ID}" \
            --data-urlencode "text=${MSG}"
